package com.mySQLTesting.mySQLTesting;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String id, @RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

	 
    User n = new User();
    n.setName(name);
    n.setEmail(email);
    n.setId(id);
    
    System.out.println(n.getId() + " " + n.getName()+ " " + n.getEmail());
    userRepository.save(n);
   
    return "Created user " + id;
  }
  
  @PutMapping(path="/update")
  public @ResponseBody String updateUserInfo (@RequestParam String id, @RequestParam String name
		  , @RequestParam String email) {
	    
	  if (userRepository.existsById(id)) {
		  User n = new User();
		  n.setName(name);
		  n.setEmail(email);
		  n.setId(id);

		  userRepository.save(n);

		  return "Updated";
	  } else {
		  return "User " + id + " does not exist";
	  }
	  
  }
  
  @DeleteMapping(path="/delete")
  public @ResponseBody String deleteUser (@RequestParam String id) {
	    
	  userRepository.deleteById(id);
	  
	  return "Deleted user " + id;
	  
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  @GetMapping(path="/get")
  public @ResponseBody Optional<User> getUser(@RequestParam String id) {
    // This returns a JSON or XML with the users
    return userRepository.findById(id);
  }
}